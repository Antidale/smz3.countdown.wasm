@page "/majors"

@using smz3.countdown.wasm.Services
@inject ItemService ItemService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Majors</PageTitle>
<h3>Majors</h3>

<div class="container">
    <div class="row">
        @foreach (var item in ItemsChoices)
        {
            <fieldset class="col-lg-6 col-md-12">
                <input id="@item.Key" type="checkbox" class="form-check-input" checked="@item.Value" @onchange="(e) => CheckboxChanged(item.Key, e)" />
                <label for="@item.Key" class="form-check-label">&nbsp;@item.Key</label>
            </fieldset>
        }
    </div>
</div>



@code {

    private HashSet<string> Items { get; set; } = new HashSet<string>();
    private Dictionary<string, bool> ItemsChoices { get; set; } = new Dictionary<string, bool>();

    protected override async Task OnInitializedAsync()
    {

        var storageMajors = await localStorage.GetItemAsync<List<string>>("Majors");
        if (storageMajors != null)
        {
            Items = storageMajors.ToHashSet();
        }
        else
        {
            Items = ItemService.MajorItems.OrderBy(x => x).ToHashSet();
        }

        ItemsChoices = ItemService.AllItems.GroupJoin(
            Items,
            a => a,
            i => i,
            (a, i) => new { ItemName = a, Selected = !string.IsNullOrWhiteSpace(i.FirstOrDefault()) }
        )
        .OrderBy(x => x.ItemName).ToDictionary(x => x.ItemName, y => y.Selected);

        base.OnInitialized();
    }

    private async Task CheckboxChanged(string itemName, ChangeEventArgs e)
    {
        if (e == null || e.Value == null)
        {
            return;
        }

        var stuff = (bool)e.Value;
        if (stuff)
        {
            Items.Add(itemName);
        }
        else
        {
            Items.Remove(itemName);
        }

        ItemService.MajorItems = Items;
        await localStorage.SetItemAsync<List<string>>("Majors", Items.ToList());
    }
}
