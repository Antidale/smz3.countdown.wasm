@page "/"
@inject HttpClient Http
@using smz3.countdown.wasm.Attributes
@using smz3.countdown.wasm.Enums
@using smz3.countdown.wasm.Extenstions
@using smz3.countdown.wasm.Models

<PageTitle>Index</PageTitle>
<br />
<p>Enter Seed or Session info</p>
<input type="text" @bind="childString" @bind:event="oninput" title="for solo, use Seed (not Seed Number) for multiworld, use Session" />
<button @onclick="ConvertShortGuid">Fetch Spoiler</button>

<br />
<br />

@if (players.Count() > 1)
{
    <p>Select World:</p>
    <br />
    <select @onchange="SelectedPlayerChanged" disabled="@disableDropdown">
        <option value="" disabled selected> -- Select -- </option>
        @foreach (var player in players)
        {
            <option value="@player.Item2">@player.Item1</option>
        }
    </select>
}

@if (countdownLocationInfos.Any())
{
    <TabControl>
        @for (var i = 0; i < countdownLocationInfos.Count(); i++)
        {
            var internalIndex = i;
            <TabBody Title="@countdownLocationInfos[internalIndex].LocationName">
                <CountdownLocation @bind-LocationInfo=countdownLocationInfos[internalIndex] />
            </TabBody>
        }
    </TabControl>
}

@code {
    private List<(string, int)> players { get; set; } = new List<(string, int)>();
    private string? id { get; set; }
    private string? childString { get; set; }
    private bool isMultiworld { get; set; }
    private Dictionary<string, int> locationInfo { get; set; } = new Dictionary<string, int>();
    private SpoilerResponse response = new SpoilerResponse();
    private List<CountdownLocationInfo> countdownLocationInfos = new List<CountdownLocationInfo>();
    private int SelectedPlayer { get; set; } = 0;
    private HashSet<string> itemList { get; set; } = new HashSet<string>();
    private Dictionary<string, string> locationsList = new Dictionary<string, string>();
    private bool disableDropdown { get; set; } = false;

    string urlBase => "https://samus.link/api/spoiler/";

    public async Task ConvertShortGuid()
    {
        id = childString?.ConvertShortGuidToGuidString();

        if (string.IsNullOrWhiteSpace(id))
        {
            return;
        }

        try
        {
            var items = Enum.GetValues(typeof(Item));

            itemList = ((Item[])items).Select(x => new { Name = x.GetDescription(), IsMajor = x.IsMajor() })
                                          .Where(x => x.IsMajor)
                                          .Select(x => x.Name)
                                          .ToHashSet();

            var areas = Enum.GetValues(typeof(Area));
            locationsList = ((Area[])areas).Select(x => x.GetAttribute<AreaAttribute>()).ToDictionary(key => key.LocationRegion, value => value.DisplayText);
            locationInfo = locationsList.Select(x => x.Value).Distinct().ToDictionary(key => key, value => 0);

            response = await GetSpoilerAsync(id);
            if (!response.Locations.Any())
            {
                return;
            }

            players = response?.Seed.Worlds.Select(x => (x.Player, x.WorldId)).ToList() ?? players;

            //Single player
            if (players.Count == 1)
            {
                response?.Locations.ForEach(l =>
                {
                    if (!itemList.Contains(l.ItemName))
                    {
                        return;
                    }

                    if (locationsList.ContainsKey(l.LocationRegion))
                    {
                        var displayText = locationsList[l.LocationRegion];
                        locationInfo[displayText] += 1;

                    }
                });

                countdownLocationInfos = locationInfo.Select(x =>
                    new CountdownLocationInfo
                        {
                            LocationName = x.Key,
                            CurrentCount = x.Value,
                            OriginalCount = x.Value
                        })
                    .ToList();
            }

            //multiworld
            if (players.Count > 1)
            {
                //requires Selected Player code to be built
            }
        }
        catch (Exception ex)
        {
            var stuff = ex;
            throw ex;
        }
    }

    public async Task<SpoilerResponse> GetSpoilerAsync(string id)
    {
        return await Http.GetFromJsonAsync<SpoilerResponse>($"https://smz3-countdown-api.herokuapp.com/spoiler/{id}") ?? new SpoilerResponse();
    }

    void SelectedPlayerChanged(ChangeEventArgs e)
    {
        if (e is not null && e.Value is not null)
        {
            if (int.TryParse(e.Value.ToString(), out int selectedPlayer))
            {
                SelectedPlayer = selectedPlayer;

                response?.Locations.Where(x => x.WorldId == SelectedPlayer).ToList().ForEach(l =>
                    {
                        if (!itemList.Contains(l.ItemName))
                        {
                            return;
                        }

                        if (locationsList.ContainsKey(l.LocationRegion))
                        {
                            var displayText = locationsList[l.LocationRegion];
                            locationInfo[displayText] += 1;
                        }
                    });

                countdownLocationInfos = locationInfo.Select(x =>
                    new CountdownLocationInfo
                        {
                            LocationName = x.Key,
                            CurrentCount = x.Value,
                            OriginalCount = x.Value
                        })
                    .ToList();
                if (countdownLocationInfos.Any())
                {
                    disableDropdown = true;
                }

            }

        }
    }
}