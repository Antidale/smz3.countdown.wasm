@page "/"
@inject HttpClient Http
@using smz3.countdown.wasm.Attributes
@using smz3.countdown.wasm.Enums
@using smz3.countdown.wasm.Extenstions
@using smz3.countdown.wasm.Models

<PageTitle>Countdown</PageTitle>
<br />

@if (!countdownLocationInfos.Any())
{
    <p>Enter Seed or Session info</p>
    <input type="text" @bind="childString" @bind:event="oninput" title="for solo, use Seed (not Seed Number) for multiworld, use Session" />
    <button @onclick="ConvertShortGuid">Fetch Spoiler</button>
}
else
{

}

<br />
<br />

@if (players.Count() > 1)
{
    @if (!disableDropdown)
    {
        <div>Select World:</div>
        <select @onchange="SelectedPlayerChanged" disabled="@disableDropdown">
            <option value="" disabled selected> -- Select -- </option>
            @foreach (var player in players)
            {
                <option value="@player.Item2">@player.Item1</option>
            }
        </select>
    }
    else 
    {
        <h2>@SelectedPlayer</h2>
    }

}

@if (countdownLocationInfos.Any())
{
    <TabControl>
        @for (var i = 0; i < countdownLocationInfos.Count(); i++)
        {
            var internalIndex = i;
            <TabBody Title="@countdownLocationInfos[internalIndex].LocationName">
                <CountdownLocation @bind-LocationInfo=countdownLocationInfos[internalIndex] />
            </TabBody>
        }
    </TabControl>
}

@code {
    private List<(string, int)> players { get; set; } = new List<(string, int)>();
    private string? id { get; set; }
    private string? childString { get; set; }
    private Dictionary<string, int> locationInfo { get; set; } = new Dictionary<string, int>();
    private SpoilerResponse response = new SpoilerResponse();
    private List<CountdownLocationInfo> countdownLocationInfos = new List<CountdownLocationInfo>();
    private string SelectedPlayer { get; set; } = string.Empty;
    private HashSet<string> itemList { get; set; } = new HashSet<string>();
    private Dictionary<string, string> locationsList = new Dictionary<string, string>();
    private bool disableDropdown { get; set; } = false;

    string urlBase => "https://samus.link/api/spoiler/";

    public async Task ConvertShortGuid()
    {
        id = childString?.ConvertShortGuidToGuidString();

        if (string.IsNullOrWhiteSpace(id))
        {
            return;
        }

        try
        {
            response = await GetSpoilerAsync(id);
            if (!response.Locations.Any())
            {
                return;
            }

            players = response?.Seed.Worlds.Select(x => (x.Player, x.WorldId)).ToList() ?? players;

            //Single player
            if (players.Count == 1)
            {
                countdownLocationInfos = ParseSpoiler();
            }
            else
            {
                countdownLocationInfos = new List<CountdownLocationInfo>();
            }

        }
        catch (Exception ex)
        {
            var stuff = ex;
            throw ex;
        }
    }

    public async Task<SpoilerResponse> GetSpoilerAsync(string id)
    {
        return await Http.GetFromJsonAsync<SpoilerResponse>($"https://smz3-countdown-api.herokuapp.com/spoiler/{id}") ?? new SpoilerResponse();
    }

    void SelectedPlayerChanged(ChangeEventArgs e)
    {
        if (e is not null && e.Value is not null)
        {
            if (int.TryParse(e.Value.ToString(), out int selectedPlayer))
            {
                SelectedPlayer = players.FirstOrDefault(x => x.Item2 == selectedPlayer).Item1;

                countdownLocationInfos = ParseSpoiler(selectedPlayer);

                if (countdownLocationInfos.Any())
                {
                    disableDropdown = true;
                }
            }
        }
    }

    protected override void OnInitialized()
    {
        var items = Enum.GetValues(typeof(Item));
        itemList = ((Item[])items).Select(x => new { Name = x.GetDescription(), IsMajor = x.IsMajor() })
                                  .Where(x => x.IsMajor)
                                  .Select(x => x.Name)
                                  .ToHashSet();

        var areas = Enum.GetValues(typeof(Area));
        locationsList = ((Area[])areas).Select(x => x.GetAttribute<AreaAttribute>())
                                       .ToDictionary(key => key.LocationRegion, value => value.DisplayText);

        locationInfo = locationsList.Select(x => x.Value)
                                     .Distinct()
                                    .ToDictionary(key => key, value => 0);
        base.OnInitialized();
    }

    private List<CountdownLocationInfo> ParseSpoiler(int? worldId = null)
    {
        response?.Locations.Where(x => worldId == null || x.WorldId == worldId!).ToList().ForEach(l =>
        {
            if (!itemList.Contains(l.ItemName))
            {
                return;
            }

            if (locationsList.ContainsKey(l.LocationRegion))
            {
                var displayText = locationsList[l.LocationRegion];
                locationInfo[displayText] += 1;
            }
        });

        return locationInfo.Select(x =>
            new CountdownLocationInfo
                {
                    LocationName = x.Key,
                    CurrentCount = x.Value,
                    OriginalCount = x.Value
                })
            .ToList();
    }
}