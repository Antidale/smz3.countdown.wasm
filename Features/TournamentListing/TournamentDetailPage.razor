@page "/tournaments/{id:int}"
@using FeInfo.Common.DTOs
@using smz3.countdown.wasm.Extenstions
@inject HttpClient Http


<h3>@tournamentSummary.TournamentName</h3>
<div class="detail-container">


    <QuickGrid Items="Registrants" Class="striped">
        <PropertyColumn Property="@(r => r.DiscordName)" Title="Discord Name" Sortable="true"/>
        <PropertyColumn Property="@(r => r.TwitchName)" Title="Twitch Name" Sortable="true"/>
        <PropertyColumn Property="@(r => r.Pronouns)" Sortable="true"/>
        <PropertyColumn Property="@(r => r.DisplayName)" Title="Display Name" Sortable="true"/>
        <PropertyColumn Property="@(r => r.RegisterationDateLocal())" Title="Registration Date" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending" />
    </QuickGrid>
    @if(Registrants is not null && Registrants.Count() > 16)
    {
        <Paginator State="@pagination" />
    }
    
</div>

@code {
    [CascadingParameter]
    public TournamentAppState AppState { get; set; } = new ();
    
    [Parameter]
    public int id { get; set; }

    PaginationState pagination = new PaginationState { ItemsPerPage = 16 };

    private TournamentSummary tournamentSummary = new();

    private IQueryable<TournamentRegistrant>? Registrants = new List<TournamentRegistrant>().AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        Registrants = await AppState.GetTournamentRegistrants(id);

        tournamentSummary = AppState.Tournaments.FirstOrDefault(x => x.TournamentId == id) ?? tournamentSummary;
        if(tournamentSummary.TournamentId == 0)
        {
            await AppState.FetchTournaments();
            tournamentSummary = AppState.Tournaments.FirstOrDefault(x => x.TournamentId == id) ?? tournamentSummary;
        }
        
    }
}
