@page "/tournaments/{id:int}"

<h1 class="h3">@_tournamentSummary.TournamentName</h1>
<h2 class="h5">@_tournamentSummary.GuildName</h2>
<p>@_tournamentSummary.EntrantCount Entrants</P>
<div class="button-row">
    @if(_tournamentSummary.HasRulesLink())
    {
        <a class="" href="@_tournamentSummary.RulesLink">Rules Doc</a>
    }

    @if(_tournamentSummary.HasStandingsLink())
    {
        <a class="" href="@_tournamentSummary.StandingsLink">Standings</a>
    }
</div>
<details>
    <summary>
        @_tournamentSummary.RegistrationStatus()
    </summary>
    <p>Registration Start: @_tournamentSummary.RegistrationStart.ToLocalString()</p>
    <p>Registration End: @_tournamentSummary.RegistrationEnd.ToLocalString()</p>
</details>

<div class="detail-container">
    @if(_entrants is null || _entrants.All(e => string.IsNullOrWhiteSpace(e.DiscordName)))
    {
        <h4>No Entrants</h4>
    }
    else
    {
        <QuickGrid Items="_entrants" Class="table table-striped">
            <PropertyColumn Property="@(r => r.DiscordName)" Title="Discord Name" Sortable="true"/>
            <PropertyColumn Property="@(r => r.TwitchName)" Title="Twitch Name" Sortable="true"/>
            <PropertyColumn Property="@(r => r.Pronouns)" Sortable="true"/>
            <PropertyColumn Property="@(r => r.DisplayName)" Title="Display Name" Sortable="true"/>
            <TemplateColumn Title="Registration Date" SortBy="@_sortByRegistrationDate" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending" Sortable="true">@context.RegistrationDateLocal()</TemplateColumn>
        </QuickGrid>

        @if(_entrants is not null && _entrants.Count() > 16)
        {
            <Paginator State="@_pagination" />
        }
    }
</div>

@code {
    [CascadingParameter]
    public TournamentAppState AppState { get; set; } = new ();
    
    [Parameter]
    public int Id { get; set; }

    readonly PaginationState _pagination = new PaginationState { ItemsPerPage = 16 };

    private TournamentSummary _tournamentSummary = new();

    private IQueryable<TournamentRegistrant>? _entrants = new List<TournamentRegistrant>().AsQueryable();

    protected override async Task OnParametersSetAsync()
    {
        _entrants = await AppState.GetTournamentRegistrants(Id);

        _tournamentSummary = AppState.Tournaments.FirstOrDefault(x => x.TournamentId == Id) ?? _tournamentSummary;
        if(_tournamentSummary.TournamentId == 0)
        {
            await AppState.FetchTournaments();
            _tournamentSummary = AppState.Tournaments.FirstOrDefault(x => x.TournamentId == Id) ?? _tournamentSummary;
        }

    }

    readonly GridSort<TournamentRegistrant> _sortByRegistrationDate = GridSort<TournamentRegistrant>.ByDescending(r => r.RegistrationDate.Ticks);
}
