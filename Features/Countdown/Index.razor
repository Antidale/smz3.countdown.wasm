@page "/"

@using System.Diagnostics
@using smz3.countdown.wasm.Attributes
@using smz3.countdown.wasm.Enums
@using smz3.countdown.wasm.Extenstions
@using smz3.countdown.wasm.Models
@using smz3.countdown.wasm.Services
@using smz3.countdown.wasm.Components

@inject HttpClient Http
@inject ItemService ItemService
@inject LocationService LocationService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@implements IAsyncDisposable

<PageTitle>Countdown</PageTitle>
<br />

@if (!countdownLocationInfos.Any())
{
    <p>Enter Seed or Session info</p>
    <input type="text" @bind="childString" @bind:event="oninput" title="for solo, use Seed (not Seed Number) for multiworld, use Session" />
    <button @onclick="ConvertShortGuid">Fetch Spoiler</button>
}
else
{
    <div class="row">
        <button @onclick="SaveSeedAsync" class="btn btn-success col-md-2 col-sm-12">Save Seed</button>
        <div class="col-md-2"></div>
        <div class="col-md-5 font-monospace"><h4>@seedHash</h4></div>
        <div class="col-md-1"></div>
        <button @onclick="NewSeed" class="btn btn-outline-success col-md-2 col-sm-12d">New Seed</button>
    </div>
    <div class="row">
        <div class="text-center">Remaining: @TotalRemainingCount of @TotalItemCount</div>
    </div>
    <br />
    <br />
}

<br />
<br />

@if (players.Count() > 1)
{
    @if (!disableDropdown)
    {
        <div>Select World:</div>
        <select @onchange="SelectedPlayerChanged" disabled="@disableDropdown">
            <option value="" disabled selected> -- Select -- </option>
            @foreach (var player in players)
            {
                <option value="@player.Item2">@player.Item1</option>
            }
        </select>
    }
    else
    {
        <h2>@SelectedPlayer</h2>
    }
}

@if (countdownLocationInfos.Any())
{
    <TabControl>
        @for (var i = 0; i < countdownLocationInfos.Count(); i++)
        {
            var internalIndex = i;
            var locationName = countdownLocationInfos[internalIndex].LocationName ?? string.Empty;
            var areaLocations = locationGrouping == "Spoiler" ? LocationService.Locations[locationName] : LocationService.AltLocations[locationName];
            <TabBody Title="@countdownLocationInfos[internalIndex].LocationName">
                <CountdownLocation @bind-LocationInfo=countdownLocationInfos[internalIndex] Locations=areaLocations />
            </TabBody>
        }
    </TabControl>
}

@code {
    private List<(string, int)> players { get; set; } = new List<(string, int)>();
    private string? id { get; set; }
    private string? childString { get; set; }
    private Dictionary<string, int> locationInfo { get; set; } = new Dictionary<string, int>();
    private SpoilerResponse response = new SpoilerResponse();
    private List<CountdownLocationInfo> countdownLocationInfos = new List<CountdownLocationInfo>();
    private string SelectedPlayer { get; set; } = string.Empty;
    private HashSet<string> itemList { get; set; } = new HashSet<string>();
    private Dictionary<string, string> locationsList = new Dictionary<string, string>();
    private bool disableDropdown { get; set; } = false;
    private string seedHash { get; set; } = string.Empty;
    private string locationGrouping { get; set; } = "Spoiler";

    int TotalItemCount => countdownLocationInfos.Sum(x => x.OriginalCount);
    int TotalRemainingCount => countdownLocationInfos.Sum(x => x.CurrentCount);

    public async Task ConvertShortGuid()
    {
        id = childString?.Trim().ConvertShortGuidToGuidString();

        if (string.IsNullOrWhiteSpace(id))
        {
            return;
        }

        try
        {
            response = await GetSpoilerAsync(id);
            if (!response.Locations.Any())
            {
                return;
            }

            players = response?.Seed.Worlds.Select(x => (x.Player, x.WorldId)).ToList() ?? players;
            seedHash = response?.Seed.Hash ?? string.Empty;

            //Single player
            if (players.Count == 1)
            {
                countdownLocationInfos = ParseSpoiler();
            }
            //Delay showing locations until a player is chosen
            else
            {
                countdownLocationInfos = new List<CountdownLocationInfo>();
            }

        }
        catch (Exception ex)
        {
            var stuff = ex;
            throw ex;
        }
    }

    public async Task<SpoilerResponse> GetSpoilerAsync(string id)
    {
        return await Http.GetFromJsonAsync<SpoilerResponse>($"https://smz3-countdown-api.herokuapp.com/spoiler/{id}") ?? new SpoilerResponse();
    }

    void SelectedPlayerChanged(ChangeEventArgs e)
    {
        if (e is not null && e.Value is not null)
        {
            if (int.TryParse(e.Value.ToString(), out int selectedPlayer))
            {
                SelectedPlayer = players.FirstOrDefault(x => x.Item2 == selectedPlayer).Item1;

                countdownLocationInfos = ParseSpoiler(selectedPlayer);

                if (countdownLocationInfos.Any())
                {
                    disableDropdown = true;
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //This delay is a bit of a hack, because I've decided to pass data via reading/writing to local storage.
        // A better option would probably be either to use cascading parameters, or change how the ItemService works
        await Task.Delay(8);

        //Fetch any saved data
        await GetSavedMajorsAsync();
        await GetGroupingModeAsync();
        GetLocationInfo();
        await GetSavedCoundownInfoAsync();
        await GetSavedPlayerInfoAsync();
        await GetSavedSeedHashAsync();
        base.OnInitialized();
    }

    private List<CountdownLocationInfo> ParseSpoiler(int? worldId = null)
    {

        response?.Locations.Where(x => worldId == null || x.WorldId == worldId!).ToList().ForEach(l =>
        {
            if (!itemList.Contains(l.ItemName))
            {
                return;
            }

            if (locationsList.ContainsKey(l.LocationName))
            {
                var displayText = locationsList[l.LocationName];

                locationInfo[displayText] += 1;
            }

            if (locationsList.ContainsKey(l.LocationRegion))
            {
                var displayText = locationsList[l.LocationRegion];

                locationInfo[displayText] += 1;
            }
        });

        return locationInfo.Select(x =>
            new CountdownLocationInfo
                {
                    LocationName = x.Key,
                    CurrentCount = x.Value,
                    OriginalCount = x.Value
                })
            .ToList();
    }

    private async Task NewSeed()
    {
        countdownLocationInfos = new List<CountdownLocationInfo>();
        childString = string.Empty;
        players = new List<(string, int)>();
        response = new SpoilerResponse();
        SelectedPlayer = string.Empty;
        seedHash = string.Empty;
        await localStorage.SetItemAsStringAsync("ActiveSeedGroupingMode", string.Empty);
        await GetGroupingModeAsync();
        GetLocationInfo();
        foreach (var location in locationInfo)
        {
            locationInfo[location.Key] = 0;
        }

        await SaveSeedAsync();

        StateHasChanged();
    }

    private async Task SaveSeedAsync()
    {
        await localStorage.SetItemAsStringAsync("Hash", seedHash);
        await localStorage.SetItemAsync<List<CountdownLocationInfo>>("CurrentSeed", countdownLocationInfos);
        await localStorage.SetItemAsync<List<(string, int)>>("players", players);
        await localStorage.SetItemAsStringAsync("SelectedPlayer", SelectedPlayer);
        await localStorage.SetItemAsStringAsync("ActiveSeedGroupingMode", locationGrouping);
    }

    public async ValueTask DisposeAsync()
    {
        await SaveSeedAsync();
    }

    private async Task GetSavedCoundownInfoAsync()
    {
        var currentSeed = await localStorage.GetItemAsync<List<CountdownLocationInfo>>("CurrentSeed");
        if (currentSeed != null)
        {
            countdownLocationInfos = currentSeed;
        }
    }

    private async Task GetSavedSeedHashAsync()
    {
        seedHash = (await localStorage.GetItemAsStringAsync("Hash")) ?? string.Empty;
    }

    private async Task GetGroupingModeAsync()
    {
        var savedGroupingMode = await localStorage.GetItemAsStringAsync("ActiveSeedGroupingMode");
        var groupingMode = await localStorage.GetItemAsStringAsync("GroupingMode");

        if (!string.IsNullOrWhiteSpace(savedGroupingMode))
        {
            locationGrouping = savedGroupingMode;
            return;
        }

        locationGrouping = groupingMode ?? locationGrouping;
    }

    private async Task GetSavedPlayerInfoAsync()
    {
        var currentPlayers = await localStorage.GetItemAsync<List<(string, int)>>("players");
        if (currentPlayers != null && currentPlayers.Count > 1)
        {
            players = currentPlayers;
        }

        var currentPlayer = await localStorage.GetItemAsStringAsync("SelectedPlayer");
        if (!string.IsNullOrEmpty(currentPlayer))
        {
            SelectedPlayer = currentPlayer;
            disableDropdown = true;
        }
    }

    private async Task GetSavedMajorsAsync()
    {
        var storageMajors = await localStorage.GetItemAsync<List<string>>("Majors");
        if (storageMajors != null)
        {
            itemList = storageMajors.ToHashSet();
        }
        else
        {
            itemList = ItemService.MajorItems;
        }
    }

    public void GetLocationInfo()
    {
        if (locationGrouping == "Spoiler")
        {
            locationsList = LocationService.Locations.SelectMany(x => x.Value, (key, value) => new { LocationName = value, DisplayName = key.Key })
                                                     .ToDictionary(x => x.LocationName, y => y.DisplayName);
        }
        else
        {
            locationsList = LocationService.AltLocations.SelectMany(x => x.Value, (key, value) => new { LocationName = value, DisplayName = key.Key })
                                                        .ToDictionary(x => x.LocationName, y => y.DisplayName);
        }

        locationInfo = locationsList.Select(x => x.Value)
                                    .Distinct()
                                    .ToDictionary(key => key, value => 0);
    }
}